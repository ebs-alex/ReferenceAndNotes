
...........

Rounding using toFixed()

const lotsOfDecimal = 1.766584958675746364;
const twoDecimalPlaces = lotsOfDecimal.toFixed(2);
twoDecimalPlaces will result to 1.77

...........

This example slices out a portion of a string from position -12 to position -6:

let text = "Apple, Banana, Kiwi";
let part = text.slice(-12, -6);

...

substr() is similar to slice().

The difference is that the second parameter specifies the length of the extracted part.

Example
let str = "Apple, Banana, Kiwi";
let part = str.substr(7, 6);

...........

The replace() method replaces a specified value with another value in a string:

Example
let text = "Please visit Microsoft!";
let newText = text.replace("Microsoft", "W3Schools");

The replace() method does not change the string it is called on.
The replace() method returns a new string.
The replace() method replaces only the first match

...

To replace case insensitive, use a regular expression with an /i flag (insensitive):

Example
let text = "Please visit Microsoft!";
let newText = text.replace(/MICROSOFT/i, "W3Schools");

...

To replace all matches, use a regular expression with a /g flag (global match):

Example
let text = "Please visit Microsoft and Microsoft!";
let newText = text.replace(/Microsoft/g, "W3Schools");

...

The replaceAll() method allows you to specify a regular expression instead of a string to be replaced.

If the parameter is a regular expression, the global flag (g) must be set, otherwise a TypeError is thrown.

Example
text = text.replaceAll(/Cats/g,"Dogs");
text = text.replaceAll(/cats/g,"dogs");

...........

The padStart() method pads a string from the start.

It pads a string with another string (multiple times) until it reaches a given length.

Examples
Pad a string with "0" until it reaches the length 4:

let text = "5";
let padded = text.padStart(4,"0");

padEnd() behaves same way but for padding added to end of string. 

...........

The charAt() method returns the character at a specified index (position) in a string:

Example
let text = "HELLO WORLD";
let char = text.charAt(0);

...........

A string can be converted to an array with the split() method:

Example
text.split(",")    // Split on commas
text.split(" ")    // Split on spaces
text.split("|")    // Split on pipe
If the separator is omitted, the returned array will contain the whole string in index [0].

If the separator is "", the returned array will be an array of single characters:

...........

startsWith()	Checks whether a string begins with specified characters

search()	Searches a string for a value, or regular expression, and returns the index (position) of the match

match()	Searches a string for a value, or a regular expression, and returns the matches

endsWith()	Returns if a string ends with a specified value

fromCharCode()	Returns Unicode values as characters

includes()	Returns if a string contains a specified value

indexOf()	Returns the index (position) of the first occurrence of a value in a string

lastIndexOf()	Returns the index (position) of the last occurrence of a value in a string

...........


The OR || operator does the following:

Evaluates operands from left to right.
For each operand, converts it to boolean. If the result is true, stops and returns the original value of that operand.
If all operands have been evaluated (i.e. all were false), returns the last operand.
A value is returned in its original form, without the conversion.

In other words, a chain of OR || returns the first truthy value or the last one if no truthy value is found.

For instance:

alert( 1 || 0 ); // 1 (1 is truthy)

alert( null || 1 ); // 1 (1 is the first truthy value)
alert( null || 0 || 1 ); // 1 (the first truthy value)

alert( undefined || null || 0 ); // 0 (all falsy, returns the last value)

For instance, we have firstName, lastName and nickName variables, all optional (i.e. can be undefined or have falsy values).

Let’s use OR || to choose the one that has the data and show it (or "Anonymous" if nothing set):

let firstName = "";
let lastName = "";
let nickName = "SuperCoder";

alert( firstName || lastName || nickName || "Anonymous"); // SuperCoder


Another feature of OR || operator is the so-called “short-circuit” evaluation.

if an operand isn’t just a value, but an expression with a side effect, 
such as a variable assignment or a function call.

In the example below, only the second message is printed:

true || alert("not printed");
false || alert("printed");

...........

AND “&&” finds & returns the first falsy value

alert( 1 && 0 ); // 0

When all values are truthy, the last value is returned:

alert( 1 && 2 && 3 ); // 3, the last one




-----

USEFUL FUNCTIONS

function random(number) {
  return Math.floor(Math.random() * number);
}